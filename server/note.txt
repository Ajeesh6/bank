server creation
---------------

1. create package.json file   - npm init
2. install express framework  - npm i express


server side technology  - node - resolves multiple requests at a time

api
---
http request

  header           body
  secret data      data-json/xml

 types
 -----
 GET    - read
 POST   - create
 PUT    - complete updation
 PATCH  - partial updation
 DELETE - remove data

server response status code
----------------------------
100  - information
200  - success
300  - redirection
400  - client side error
500  - server side error 

server creation steps
---------------------
1.import express
2.create app using express
3.set port number  - 3000
4.resolve http requests


Nodemon
-------
if we run server using node, recombilation not work
so we use another server - Nodemon

- npm i -g nodemon


express.json()       - to convert all requests datas from json to js
.json(data)          - convert(js to json) and sent the data as resonse
.status(statusCode)  - change the response status to code as statusCode


TOKEN in server
---------------
JWT - json web token

install
        -npm i jsonwebtoken
library - jsonwebtoken        
sign() - method used to generate jwt token
verify()-used to verify json web token

token verification
------------------
-token verification can be done using middlewares
-middlewares have the capacity to control server request
-middleware is a function with three arguments - request,response,next

- two type of middleware

   1.Application specific middleware - work before all request
   2.Router specific middleware      - can apply to specific request in server

how to solve runtime errors in js
---------------------------------
try except

try
   error causing code 

catch
     error solve




Mongo DB - database
--------------------

install mongo db server


shell commands
--------------

show dbs                                                         - to see databases
use (Database_name)                                              - to open a database
show collections                                                 - to see collections in db
db.(collection_name).find()                                      - to read all data in collection_name
db.(collection_name).findOne({acno:1000})                        - to read single data
db.(collection_name).insertOne({"acno":1001,"name":"amal",....}) - create new data
db.(collection_name).find({balance:{gt:4000}})                   -find using a condition
db.(collection_name).deleteOne({"uname":"anu"})                  -delete count  used to delete
db.(collection_name).updateOne({uname:anu},{$set:{uname:anu v}}) -update


server database integration
----------------------------
database -27017
server   -3000


mongoose -used to server mdb integration

install - npm i mongoose

steps
-----
1.import mongoose
2.sate a connection string to integrate
3.define a model for our collection 


FrontEnd server integration
----------------------------
CORS - cross origin resource sharing - library used to frontEnd server integration
(4200-3000)

steps
-----
1.import cors 
2.connection string 














